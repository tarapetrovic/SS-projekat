%{
#ifdef YYDEBUG
    yydebug = 1;
#endif

#ifndef PARSER_HPP
#define PARSER_HPP

#include <stdio.h>
#include <stdlib.h>
#include "parser.hpp"
#include "assembler.hpp"

extern Assembler assembler;

// Function declaration
int yyerror(const char *s);
int yylex();
%}
%output  "parser.cpp"
%defines "parser.hpp"

%token DOLLAR_SIGN COMMA COLON OPEN_BRACKET CLOSED_BRACKET PLUS EQUAL MINUS
%token GLOBAL EXTERN SECTION WORD SKIP ASCII EQU END
%token HALT INT IRET CALL RET JMP BEQ BNE BGT PUSH POP XCHG ADD SUB MUL DIV
%token NOT AND OR XOR SHL SHR LD ST CSRRD CSRWR
%token EOL

%union {
    int intval;
    char *strval;
    char charval;
}

%token <intval> LITERAL GPRX
%token <strval> SYMBOL STRING CSRX

%%
program:
    line
    | program line
    ;

line:
    EOL                        { printf("\n"); }
    | statement EOL            { printf("\n"); }
    ;

statement:
    directive
    | instruction
    | label
    | label instruction
    | label directive
    ;

label:
    SYMBOL COLON               { printf("SYMBOL %s COLON ", $1); }
    ;

directive:
    END                        { printf("END "); }
    | SKIP LITERAL             { printf("SKIP LITERAL %d ", $2); }
    | ASCII STRING             { printf("ASCII STRING %s ", $2); }
    | SECTION SYMBOL           { printf("SECTION SYMBOL %s ", $2); }
    | GLOBAL list_of_global_symbols 
    | EXTERN list_of_extern_symbols 
    | WORD list_of_symbols_or_literals
    ;

list_of_global_symbols:
    SYMBOL                     { printf("GLOBAL SYMBOL %s ", $1); }
    | list_of_global_symbols COMMA SYMBOL { printf(" COMMA SYMBOL "); }
    ;

list_of_extern_symbols:
    SYMBOL                     { printf("EXTERN SYMBOL %s ", $1); }
    | list_of_extern_symbols COMMA SYMBOL { printf( "COMMA SYMBOL %s ", $3); }
    ;

list_of_symbols_or_literals:
    SYMBOL                     { printf("WORD SYMBOL %s ", $1); }
    | LITERAL                  { printf("WORD LITERAL %d ", $1); }
    | list_of_symbols_or_literals COMMA SYMBOL { printf("COMMA SYMBOL %s ", $3); }
    | list_of_symbols_or_literals COMMA LITERAL { printf("COMMA LITERAL %d ", $3); }
    ;

instruction:
    HALT                       { printf("HALT "); }
    | INT                      { printf("INT "); }
    | IRET                     { printf("IRET "); }
    | CALL LITERAL             { printf("CALL LITERAL %d ", $2); }
    | CALL SYMBOL              { printf("CALL SYMBOL %s ", $2); }
    | RET                      { printf("RET "); }
    | JMP LITERAL              { printf("JMP LITERAL %d ", $2); }
    | JMP SYMBOL               { printf("JMP SYMBOL %s ", $2); }
    | BEQ GPRX COMMA GPRX COMMA LITERAL { printf("BEQ GPRX %d COMMA GPRX %d COMMA LITERAL %d ", $2, $4, $6); }
    | BEQ GPRX COMMA GPRX COMMA SYMBOL { printf("BEQ GPRX %d COMMA GPRX %d COMMA SYMBOL %s ", $2, $4, $6); }
    | BNE GPRX COMMA GPRX COMMA LITERAL { printf("BNE GPRX %d COMMA GPRX %d COMMA LITERAL %d ", $2, $4, $6); }
    | BNE GPRX COMMA GPRX COMMA SYMBOL { printf("BNE GPRX %d COMMA GPRX %d COMMA SYMBOL %s ", $2, $4, $6); }
    | BGT GPRX COMMA GPRX COMMA LITERAL { printf("BGT GPRX %d COMMA GPRX %d COMMA LITERAL %d ", $2, $4, $6); }
    | BGT GPRX COMMA GPRX COMMA SYMBOL { printf("BGT GPRX %d COMMA GPRX %d COMMA SYMBOL %s ", $2, $4, $6); }
    | PUSH GPRX                { assembler.dummy_fja(); printf("PUSH GPRX %d ", $2); }
    | POP GPRX                 { assembler.dummy_fja(); printf("POP GPRX %d ", $2); }
    | XCHG GPRX COMMA GPRX     { printf("XCHG GPRX %d COMMA GPRX %d ", $2, $4); }
    | ADD GPRX COMMA GPRX      { printf("ADD GPRX %d COMMA GPRX %d ", $2, $4); }
    | SUB GPRX COMMA GPRX      { printf("SUB GPRX %d COMMA GPRX %d ", $2, $4); }
    | MUL GPRX COMMA GPRX      { printf("MUL GPRX %d COMMA GPRX %d ", $2, $4); }
    | DIV GPRX COMMA GPRX      { printf("DIV GPRX %d COMMA GPRX %d ", $2, $4); }
    | NOT GPRX                 { printf("NOT GPRX %d ", $2); }
    | AND GPRX COMMA GPRX      { printf("AND GPRX %d COMMA GPRX %d ", $2, $4); }
    | OR GPRX COMMA GPRX       { printf("OR GPRX %d COMMA GPRX %d ", $2, $4); }
    | SHL GPRX COMMA GPRX      { printf("SHL GPRX %d COMMA GPRX %d ", $2, $4); }
    | SHR GPRX COMMA GPRX      { printf("SHR GPRX %d COMMA GPRX %d ", $2, $4); }
    | LD DOLLAR_SIGN LITERAL COMMA GPRX { assembler.dummy_fja(); printf("LD DOLLAR_SIGN LITERAL %d COMMA GPRX %d ", $3, $5); }
    | LD DOLLAR_SIGN SYMBOL COMMA GPRX { printf("LD DOLLAR_SIGN SYMBOL %s COMMA GPRX %d ", $3, $5); }
    | LD LITERAL COMMA GPRX    { printf("LD LITERAL %d COMMA GPRX %d ", $2, $4); }
    | LD SYMBOL COMMA GPRX     { printf("LD SYMBOL %s COMMA GPRX %d ", $2, $4); }
    | LD GPRX COMMA GPRX       { printf("LD GPRX %d COMMA GPRX %d ", $2, $4); }
    | LD OPEN_BRACKET GPRX CLOSED_BRACKET COMMA GPRX { printf("LD [GPRX %d] COMMA GPRX %d ", $3, $6); }
    | LD OPEN_BRACKET GPRX PLUS LITERAL CLOSED_BRACKET COMMA GPRX { printf("LD [GPRX %d PLUS LITERAL %d] COMMA GPRX %d ", $3, $5, $8); }
    | LD OPEN_BRACKET GPRX PLUS SYMBOL CLOSED_BRACKET COMMA GPRX { printf("LD [GPRX %d PLUS SYMBOL %s] COMMA GPRX %d ", $3, $5, $8); }
    | ST GPRX COMMA LITERAL    { assembler.dummy_fja(); printf("ST GPRX %d COMMA LITERAL %d ", $2, $4); }
    | ST GPRX COMMA SYMBOL     { printf("ST GPRX %d COMMA SYMBOL %s ", $2, $4); }
    | ST GPRX COMMA GPRX       { printf("ST GPRX %d COMMA GPRX %d ", $2, $4); }
    | ST GPRX COMMA OPEN_BRACKET GPRX CLOSED_BRACKET { printf("ST GPRX %d COMMA [GPRX %d] ", $2, $5); }
    | ST GPRX COMMA OPEN_BRACKET GPRX PLUS LITERAL CLOSED_BRACKET { printf("ST GPRX %d COMMA [GPRX %d PLUS LITERAL %d] ", $2, $5, $7); }
    | ST GPRX COMMA OPEN_BRACKET GPRX PLUS SYMBOL CLOSED_BRACKET { printf("ST GPRX %d COMMA [GPRX %d PLUS SYMBOL %s] ", $2, $5, $7); }
    | CSRRD CSRX COMMA GPRX    { printf("CSRRD CSRX %s COMMA GPRX %d ", $2, $4); }
    | CSRWR GPRX COMMA CSRX    { printf("CSRWR GPRX %d COMMA CSRX %s ", $2, $4); }
    ;
%%



int yyerror(const char *s){
    return 0;
}

#endif

